plugins {
    id 'io.micronaut.build.internal.jms-base'
    id 'io.micronaut.minimal.application'
}
configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute module('io.micronaut.jms:micronaut-jms-core') using project(':micronaut-jms-core')
        substitute module('io.micronaut.jms:micronaut-jms-activemq-classic') using project(':micronaut-jms-activemq-classic')
        substitute module('io.micronaut.jms:micronaut-jms-activemq-artemis') using project(':micronaut-jms-activemq-artemis')
        substitute module('io.micronaut.jms:micronaut-jms-sqs') using project(':micronaut-jms-sqs')
    }
}
micronaut {
    version libs.versions.micronaut.platform.get()
    importMicronautPlatform = false
    runtime "netty"
}

application {
    mainClass = 'example.Application'
}

dependencies {
    micronautBoms(platform(mn.micronaut.core.bom))
    micronautBoms(platform(mnTest.micronaut.test.bom))
    runtimeOnly(mn.snakeyaml)
    testImplementation(mnLogging.logback.classic)
}
